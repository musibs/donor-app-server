/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.codefountain.swagger;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UncheckedIOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.codefountain.swagger.client.model.Donor;
import io.codefountain.swagger.client.model.Iterable;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-11-16T11:12:22.062+11:00")

@Api(value = "api", description = "the api API")
public interface ApiApi {

    Logger log = LoggerFactory.getLogger(ApiApi.class);

    static final String UTF_8 = "UTF-8";
    
    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

	static String asString(Resource resource) {
        try (Reader reader = new InputStreamReader(resource.getInputStream(), UTF_8)) {
            return FileCopyUtils.copyToString(reader);
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }
	
	 default Resource getResource() {
	    	ResourceLoader resourceLoader = new DefaultResourceLoader();
	    	return resourceLoader.getResource("classpath:donor.json");
	  }
	 
    @ApiOperation(value = "Create a new donor", nickname = "createDonorUsingPOST", notes = "", response = Donor.class, tags={ "donor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created a new donor", response = Donor.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
        @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
        @ApiResponse(code = 404, message = "The resource you were trying to reach is not found"),
        @ApiResponse(code = 500, message = "Application failed to process the request") })
    @RequestMapping(value = "/api/donors",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Donor> createDonorUsingPOST(@ApiParam(value = "donor" ,required=true )  @Valid @RequestBody Donor donor) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("", Donor.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type ", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ApiApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes specific donor with the supplied donor id", nickname = "deleteUsingDELETE", notes = "", tags={ "donor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deletes the specific donor"),
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
        @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
        @ApiResponse(code = 404, message = "The resource you were trying to reach is not found"),
        @ApiResponse(code = 500, message = "Application failed to process the request") })
    @RequestMapping(value = "/api/donors/{id}",
        produces = { "*/*" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteUsingDELETE(@ApiParam(value = "id",required=true) @PathVariable("id") Long id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ApiApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Retrieve specific donor with the supplied donor id", nickname = "getDonorUsingGET", notes = "", response = Donor.class, tags={ "donor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved the donor with the supplied id", response = Donor.class),
        @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
        @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
        @ApiResponse(code = 404, message = "The resource you were trying to reach is not found"),
        @ApiResponse(code = 500, message = "Application failed to process the request") })
    @RequestMapping(value = "/api/donors/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Donor> getDonorUsingGET(@ApiParam(value = "id",required=true) @PathVariable("id") Long id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                	String donor = asString(getResource());
                	System.out.println(donor);
                    return new ResponseEntity<>(getObjectMapper().get().readValue(donor, Donor.class), HttpStatus.OK);
                    //return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"bloodGroup\" : \"bloodGroup\",  \"firstName\" : \"firstName\",  \"lastName\" : \"lastName\",  \"firstTimeDonor\" : true,  \"dateOfBirth\" : \"2000-01-23\",  \"donorId\" : 0,  \"emergencyContactNo\" : \"emergencyContactNo\",  \"contactNo\" : \"contactNo\"}", Donor.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ApiApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "View all donors", nickname = "getDonorsUsingGET", notes = "", response = Iterable.class, tags={ "donor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved all donors", response = Iterable.class),
        @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
        @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
        @ApiResponse(code = 404, message = "The resource you were trying to reach is not found"),
        @ApiResponse(code = 500, message = "Application failed to process the request") })
    @RequestMapping(value = "/api/donors",
        produces = { "*/*" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Iterable> getDonorsUsingGET() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("", Iterable.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type ", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ApiApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Update a donor information", nickname = "updateDonorUsingPUT", notes = "", response = Donor.class, tags={ "donor-controller", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated donor information", response = Donor.class),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
        @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
        @ApiResponse(code = 404, message = "The resource you were trying to reach is not found"),
        @ApiResponse(code = 500, message = "Application failed to process the request") })
    @RequestMapping(value = "/api/donors",
        produces = { "*/*" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Donor> updateDonorUsingPUT(@ApiParam(value = "donor" ,required=true )  @Valid @RequestBody Donor donor) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("", Donor.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type ", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default ApiApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
